on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 01,13 * * *'

name: Fuzz

jobs:
  libFuzzer_x86_64:
    name: libFuzzer [x86_64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout compact_str
      - uses: actions-rs/toolchain@v1
        name: Install Rust
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        name: Install cargo-fuzz
        with:
          crate: cargo-fuzz
          version: latest
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}-nightly-fuzz-libfuzzer
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}-nightly-fuzz
            ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}-nightly
      - name: Set Fuzz Time
        run: |
          if [[ "${{github.event_name}}" == "push" || "${{github.event_name}}" == "pull_request" ]]; then
            echo "fuzz_time=120" >> $GITHUB_ENV
          else
            echo "fuzz_time=1800" >> $GITHUB_ENV
          fi
          echo "${{ env.fuzz_time }}"
      - uses: actions-rs/cargo@v1
        name: Fuzz!
        with:
          command: fuzz
          args: run --features=libfuzzer-sys --debug-assertions compact_str -- -max_total_time=${{ env.fuzz_time }}

  afl_x86_64:
    name: AFL++ [x86_64]
    runs-on: ubuntu-latest
    env:
      # we do care about crashes, but without this AFL won't run
      AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES: 1
    steps:
      - uses: actions/checkout@v2
        name: Checkout compact_str
      - uses: actions-rs/toolchain@v1
        name: Install Rust
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        name: Install cargo-afl
        with:
          crate: afl
          version: latest
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}-nightly-fuzz-afl
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}-nightly-fuzz
            ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}-nightly
      - name: AFL++ Build
        run: |
          cd fuzz
          cargo afl build --bin afl --release --features=afl
      - name: Set Fuzz Time
        run: |
          if [[ "${{github.event_name}}" == "push" || "${{github.event_name}}" == "pull_request" ]]; then
            echo "fuzz_time=120" >> $GITHUB_ENV
          else
            echo "fuzz_time=1800" >> $GITHUB_ENV
          fi
          echo "${{ env.fuzz_time }}"
      - name: Fuzz!
        run: |
          cd fuzz
          mkdir afl/out
          cargo afl fuzz -i afl/in -o afl/out -D -V ${{ env.fuzz_time }} ../target/release/afl
      - name: Check for Crashes
        run: |
          if [ "$(ls -1q ./fuzz/afl/out/default/crashes/ | wc -l)" -ne 0 ]; then exit 1; fi
      # AFL generates filenames with ":", which upload-artifact fails on, so we need to "detox" them
      - name: Sanitize Crash Filenames (if present)
        if: failure()
        run: |
          sudo apt-get install -y detox
          detox -r -v ./fuzz/afl/out/default/crashes/
      - name: Upload Crashes (if present)
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: Upload Crashes
          path: ./fuzz/afl/out/default/crashes/

  afl_armv7:
    name: AFL++ [ARMv7]
    runs-on: [self-hosted, linux, ARM]
    steps:
      - uses: actions/checkout@v2
        name: Checkout compact_str
      - name: Update Rust Nightly
        run: |
          rustup update nightly
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-armv7-${{ hashFiles('**/Cargo.toml') }}-nightly-fuzz-afl
      - name: Install cargo-afl
        run: |
          cargo +nightly install afl --force
      - name: AFL++ Build
        run: |
          cd fuzz
          cargo +nightly afl build --bin afl --release --features=afl
      - name: Set Fuzz Time
        run: |
          if [[ "${{github.event_name}}" == "push" || "${{github.event_name}}" == "pull_request" ]]; then
            echo "fuzz_time=120" >> $GITHUB_ENV
          else
            echo "fuzz_time=1800" >> $GITHUB_ENV
          fi
          echo "${{ env.fuzz_time }}"
      - name: Fuzz!
        run: |
          cd fuzz
          mkdir afl/out
          cargo +nightly afl fuzz -i afl/in -o afl/out -D -V ${{ env.fuzz_time }} ../target/release/afl
      - name: Check for Crashes
        run: |
          if [ "$(ls -1q ./fuzz/afl/out/default/crashes/ | wc -l)" -ne 0 ]; then exit 1; fi
      # AFL generates filenames with ":", which upload-artifact fails on, so we need to "detox" them
      - name: Sanitize Crash Filenames (if present)
        if: failure()
        run: |
          detox -r -v ./fuzz/afl/out/default/crashes/
      - name: Upload Crashes (if present)
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: Upload Crashes
          path: ./fuzz/afl/out/default/crashes/
  build:
    name: ${{ matrix.os }} shared=${{ matrix.shared }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        shared: [false]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            triplet: x64-linux

    steps:
      - uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Start analysis
        uses: ForAllSecure/mcode-action@v1
        with:
          mayhem-token: ${{ secrets.MAYHEM_TOKEN }}
          args: --image ${{ steps.meta.outputs.tags }} --duration 300
          sarif-output: sarif

      - name: Upload SARIF file(s)
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: sarif